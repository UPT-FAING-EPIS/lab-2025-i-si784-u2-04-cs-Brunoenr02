{
  "docs/EcommerceApp.Api.Controllers.CartController.html": {
    "href": "docs/EcommerceApp.Api.Controllers.CartController.html",
    "title": "Class CartController | EcommerceApp.Api",
    "summary": "Class CartController Namespace EcommerceApp.Api.Controllers Assembly EcommerceApp.Api.dll Controlador para manejar el proceso de checkout del carrito [ApiController] [Route(\"[controller]\")] public class CartController Inheritance object CartController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartController(ICartService, IPaymentService, IShipmentService, IDiscountService) Constructor del controlador public CartController(ICartService cartService, IPaymentService paymentService, IShipmentService shipmentService, IDiscountService discountService) Parameters cartService ICartService paymentService IPaymentService shipmentService IShipmentService discountService IDiscountService Methods CheckOut(ICard, IAddressInfo) Procesa el checkout del carrito [HttpPost] public string CheckOut(ICard card, IAddressInfo addressInfo) Parameters card ICard Datos de la tarjeta de crédito addressInfo IAddressInfo Información de envío Returns string Resultado del proceso (\"charged\" o \"not charged\")"
  },
  "docs/EcommerceApp.Api.Controllers.html": {
    "href": "docs/EcommerceApp.Api.Controllers.html",
    "title": "Namespace EcommerceApp.Api.Controllers | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Controllers Classes CartController Controlador para manejar el proceso de checkout del carrito"
  },
  "docs/EcommerceApp.Api.Models.IAddressInfo.html": {
    "href": "docs/EcommerceApp.Api.Models.IAddressInfo.html",
    "title": "Interface IAddressInfo | EcommerceApp.Api",
    "summary": "Interface IAddressInfo Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa la información de dirección para envíos public interface IAddressInfo Properties Address Dirección específica (número, departamento, etc.) string Address { get; set; } Property Value string City Ciudad de destino string City { get; set; } Property Value string PhoneNumber Número de contacto para el envío string PhoneNumber { get; set; } Property Value string PostalCode Código postal string PostalCode { get; set; } Property Value string Street Calle o avenida principal string Street { get; set; } Property Value string"
  },
  "docs/EcommerceApp.Api.Models.ICard.html": {
    "href": "docs/EcommerceApp.Api.Models.ICard.html",
    "title": "Interface ICard | EcommerceApp.Api",
    "summary": "Interface ICard Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa la información de una tarjeta de crédito/débito public interface ICard Properties CardNumber Número de la tarjeta (16 dígitos) string CardNumber { get; set; } Property Value string Examples 4111111111111111 Name Nombre del titular como aparece en la tarjeta string Name { get; set; } Property Value string Examples John Doe ValidTo Fecha de vencimiento de la tarjeta DateTime ValidTo { get; set; } Property Value DateTime Examples 2025-12-31"
  },
  "docs/EcommerceApp.Api.Models.ICartItem.html": {
    "href": "docs/EcommerceApp.Api.Models.ICartItem.html",
    "title": "Interface ICartItem | EcommerceApp.Api",
    "summary": "Interface ICartItem Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa un item en el carrito de compras public interface ICartItem Properties Price Precio unitario del producto double Price { get; set; } Property Value double Examples 29.99 ProductId Identificador único del producto string ProductId { get; set; } Property Value string Examples PRD-001 Quantity Cantidad seleccionada del producto int Quantity { get; set; } Property Value int Examples 2"
  },
  "docs/EcommerceApp.Api.Models.html": {
    "href": "docs/EcommerceApp.Api.Models.html",
    "title": "Namespace EcommerceApp.Api.Models | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Models Interfaces IAddressInfo Representa la información de dirección para envíos ICard Representa la información de una tarjeta de crédito/débito ICartItem Representa un item en el carrito de compras"
  },
  "docs/EcommerceApp.Api.Services.ICartService.html": {
    "href": "docs/EcommerceApp.Api.Services.ICartService.html",
    "title": "Interface ICartService | EcommerceApp.Api",
    "summary": "Interface ICartService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio para manejar operaciones del carrito de compras public interface ICartService Methods Items() Obtiene todos los items del carrito IEnumerable<ICartItem> Items() Returns IEnumerable<ICartItem> Enumerable con los productos en el carrito Total() Calcula el total de la compra double Total() Returns double Suma total de los items en el carrito"
  },
  "docs/EcommerceApp.Api.Services.IDiscountService.html": {
    "href": "docs/EcommerceApp.Api.Services.IDiscountService.html",
    "title": "Interface IDiscountService | EcommerceApp.Api",
    "summary": "Interface IDiscountService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio para calcular descuentos public interface IDiscountService Methods ApplyDiscount(IEnumerable<ICartItem>, ICard) Calcula el descuento aplicable a una compra double ApplyDiscount(IEnumerable<ICartItem> items, ICard card) Parameters items IEnumerable<ICartItem> Items en el carrito card ICard Tarjeta usada (para descuentos especiales) Returns double Monto del descuento"
  },
  "docs/EcommerceApp.Api.Services.IPaymentService.html": {
    "href": "docs/EcommerceApp.Api.Services.IPaymentService.html",
    "title": "Interface IPaymentService | EcommerceApp.Api",
    "summary": "Interface IPaymentService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio para procesar pagos con tarjeta public interface IPaymentService Methods Charge(double, ICard) Intenta cobrar el monto total a la tarjeta proporcionada bool Charge(double total, ICard card) Parameters total double Monto total a cobrar card ICard Datos de la tarjeta Returns bool True si el pago fue exitoso"
  },
  "docs/EcommerceApp.Api.Services.IShipmentService.html": {
    "href": "docs/EcommerceApp.Api.Services.IShipmentService.html",
    "title": "Interface IShipmentService | EcommerceApp.Api",
    "summary": "Interface IShipmentService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio para gestionar envíos de productos public interface IShipmentService Methods Ship(IAddressInfo, IEnumerable<ICartItem>) Envía los items del carrito a la dirección proporcionada void Ship(IAddressInfo info, IEnumerable<ICartItem> items) Parameters info IAddressInfo Información de dirección de envío items IEnumerable<ICartItem> Items a enviar"
  },
  "docs/EcommerceApp.Api.Services.html": {
    "href": "docs/EcommerceApp.Api.Services.html",
    "title": "Namespace EcommerceApp.Api.Services | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Services Interfaces ICartService Servicio para manejar operaciones del carrito de compras IDiscountService Servicio para calcular descuentos IPaymentService Servicio para procesar pagos con tarjeta IShipmentService Servicio para gestionar envíos de productos"
  },
  "docs/EcommerceApp.Tests.ControllerTests.html": {
    "href": "docs/EcommerceApp.Tests.ControllerTests.html",
    "title": "Class ControllerTests | EcommerceApp.Api",
    "summary": "Class ControllerTests Namespace EcommerceApp.Tests Assembly EcommerceApp.Tests.dll public class ControllerTests Inheritance object ControllerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [SetUp] public void Setup() ShouldHandleDifferentScenarios(double, double, double, bool, string) [Test] [TestCase(new object?[] { 10, 2, 8, true, \"charged with $2 discount\" })] [TestCase(new object?[] { 15, 0, 15, true, \"charged with $0 discount\" })] [TestCase(new object?[] { 20, 5, 15, false, \"not charged\" })] public void ShouldHandleDifferentScenarios(double total, double discount, double finalAmount, bool chargeResult, string expectedResult) Parameters total double discount double finalAmount double chargeResult bool expectedResult string ShouldReturnCharged() [Test] public void ShouldReturnCharged() ShouldReturnNotCharged() [Test] public void ShouldReturnNotCharged()"
  },
  "docs/EcommerceApp.Tests.html": {
    "href": "docs/EcommerceApp.Tests.html",
    "title": "Namespace EcommerceApp.Tests | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Tests Classes ControllerTests"
  },
  "index.html": {
    "href": "index.html",
    "title": "Bienvenido a la documentación de EcommerceApp | EcommerceApp.Api",
    "summary": "Bienvenido a la documentación de EcommerceApp Este sitio contiene la documentación técnica de la API EcommerceApp.Api. Secciones principales Controladores EcommerceApp.Api.Controllers Modelos EcommerceApp.Api.Models Servicios EcommerceApp.Api.Services Tests EcommerceApp.Tests Esta documentación ha sido generada automáticamente con DocFX."
  }
}